public class FloodFill {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        // store the og color 
    	int originalColor = image[sr][sc]; 
        
        // helper method
    	floodFillHelper(image, sr, sc, color, originalColor);
        
        return image;

    }
    
    // helper method to flood fill image 
    private void floodFillHelper(int[][] image, int sr, int sc, int color, int originalColor) {
    	// check bounds
    	if (sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length) {
            return;
        }
    	
    	// check color
    	if (image[sr][sc] != originalColor) {
    		return;
    	}
    	
    	// change color
    	image[sr][sc] = color; 
    	
    	// recursion to check surrounding pixels
    	floodFillHelper(image, sr - 1, sc, color, originalColor);
    	floodFillHelper(image, sr + 1, sc, color, originalColor);
    	floodFillHelper(image, sr, sc + 1, color, originalColor);
    	floodFillHelper(image, sr, sc - 1, color, originalColor);
    }
    
    // print method to make life easier 
    public static void printImage(int[][] image) {
        for (int[] row : image) {
            for (int col : row) {
                System.out.print(col + " ");
            }
            System.out.println();
        }
    }
    
    public static void main(String[] args) {
    	FloodFill test = new FloodFill();
    	
    	int[][] image1 = {{1,1,1}, {1,1,0}, {1,0,1}};
    	printImage(test.floodFill(image1, 1, 1, 2));
    	
    }
}
