package Wells;

import java.util.*;

public class Wells {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        int[][] graph = new int[n + 1][n + 1];
        
        for (int i = 0; i <= n; i++) {
            Arrays.fill(graph[i], Integer.MAX_VALUE);
        }
        
        for (int i = 0; i < wells.length; i++) {
            graph[0][i + 1] = wells[i];
            graph[i + 1][0] = wells[i];
        }

        for (int[] pipe : pipes) {
            int house1 = pipe[0];
            int house2 = pipe[1];
            int cost = pipe[2];
            graph[house1][house2] = cost;
            graph[house2][house1] = cost;
        }

        int[] costs = new int[n + 1];
        boolean[] visited = new boolean[n + 1];
        Arrays.fill(costs, Integer.MAX_VALUE);
        costs[0] = 0;
        int totalCost = 0;

        for (int i = 0; i <= n; i++) {
            int minCost = Integer.MAX_VALUE;
            int minNode = -1;

            for (int j = 0; j <= n; j++) {
                if (!visited[j] && costs[j] < minCost) {
                    minCost = costs[j];
                    minNode = j;
                }
            }
            
            if (minNode == -1) {
            	break;
            }
            
            visited[minNode] = true;
            totalCost += minCost;

            for (int j = 0; j <= n; j++) {
                if (!visited[j] && graph[minNode][j] != Integer.MAX_VALUE && graph[minNode][j] < costs[j]) {
                    costs[j] = graph[minNode][j];
                }
            }
        }
        
        return totalCost;
    }
    
    public static void main(String[] args) {
        Wells test1 = new Wells();

        int n = 2;
        int[] wells = {1, 1};
        int[][] pipes = {{1, 2, 1}, {1, 2, 2}};
        int cost = test1.minCostToSupplyWater(n, wells, pipes);
        System.out.println(cost);
    }
}
