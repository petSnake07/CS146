package Wells;

import java.util.*;

public class Wells {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        PriorityQueue<int[]> minHeap = new PriorityQueue<>();
        Set<Integer> visited = new HashSet<>();
        visited.add(0);

        for (int i = 0; i < wells.length; i++) {
            minHeap.offer(new int[]{0, i + 1, wells[i]});
        }

        for (int[] pipe : pipes) {
            minHeap.offer(pipe);
        }
        
        int totalCost = 0;
        
        while (!minHeap.isEmpty() && visited.size() < n) {
            int[] edge = minHeap.poll();
            int house1 = edge[0];
            int house2 = edge[1];
            int cost = edge[2];

            if (visited.contains(house1) && !visited.contains(house2)) {
                totalCost += cost;
                visited.add(house2);

                for (int[] pipe : pipes) {
                    if (pipe[0] == house2 && !visited.contains(pipe[1])) {
                        minHeap.offer(pipe);
                    }
                }
            } 
            
            else if (!visited.contains(house1) && visited.contains(house2)) {
                totalCost += cost;
                visited.add(house1);

                for (int[] pipe : pipes) {
                    if (pipe[1] == house1 && !visited.contains(pipe[0])) {
                        minHeap.offer(pipe);
                    }
                }
            }
        }
        
        return totalCost;
    }
    
    public static void main(String[] args) {
        Wells test1 = new Wells();

        int n = 3;
        int[] wells = {1, 2, 2};
        int[][] pipes = {{1, 2, 1}, {2, 3, 1}};
        int cost = test1.minCostToSupplyWater(n, wells, pipes);
        System.out.println("Test case 1: " + cost);

    }
}
