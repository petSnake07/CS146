1. T(N) = 2T(N-1) + 1
   T(N-1) = 2T(N-2) + 1
   T(N-2) = 2T(N-3) + 1
   etc. 
   T(N) = 2(2T(N-2) + 1) + 1 = 4T(N-2) + 3
   T(N) = 2[2[2T(N-3) + 1] + 1] + 1 = 8T(N-3) + 7
   T(N) = 16T(N-4) + 15
   etc.
   T(N) = (2^k) * T(N-k) + (2^k - 1) 

   Suppose N-k = 0:
   N = k
   T(N) = (2^N) * T(0) + (2^N - 1) 
   T(N) = 2^N + 2^N - 1
   Order of growth:  f(n) = 2^N + 2^N - 1
    ______________________________
   | Time Complexity: Theta(2^N)  |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ 
2. T(N) = 3T(N-1) + n
   T(N-1) = 3T(N-2) + n
   T(N-2) = 3T(N-3) + n
   etc. 
   T(N) = 3(3T(N-2) + n) + n = 9T(N-2) + 4n 
   T(N) = 3(3(3T(N-3) + n) + n) + n = 27T(N-3) + 13n 
   T(N) = 81T(N-4) + 40n
   etc.
   T(N) = (3^k) * T(N-k) + 3^(k-1) + 3^(k-2) + ... + 3^1 + 3^0

   Suppose N-k = 0:
   N = k
   T(N) = 3^N * T(0) + (3^(k-1) - 1)/2
   Order of growth = 3^N + (3^(N-1) - 1)/2
    ______________________________
   | Time Complexity: Theta(3^N)  |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ 
3. T(N) = 9T(N/2) + n^2

   Using the Master Theorem: 
   a = 9, b = 2, F(n) = n^2
   
   Compare n^log2(9) = n^(2 log2(3)) vs. n^2: 
   Both are the same size, so Theta(n^(2*log2(3)) * logn)
    ___________________________________
   | Time Complexity: Theta(N^2 logN)  |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞  ͞ ͞ ͞ ͞
4. T(N) = 100T(N/2) + n^(log2(cn) + 1)  (c is a constant)

   Using the Master Theorem: 
   a = 100, b = 2, F(n) = n^(log2(cn) + 1) 

   Compare n^log2(100) vs. n^(log2(cn) + 1):
   log2(100) vs. log2(cn) + 1                    Drop the n^
   2^(log2(100)) vs. 2^(log2(cn) + 1)            Raise both sides to exponents of 2
   100 vs. 2^log2(cn) * 2
   100 vs. (2c)n                                 Simplify
   (2c)n is greater than 100, so F(n) is greater

   Therefore, the time complexity is Theta(n^(log2(cn) + 1))
   Which is: n^(log2(c) + log2(n)) * n = n^(log2(n)) * n^(log2(c)) * n 
    ___________________________________
   | Time Complexity: Theta(N^log2(n)) |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞  ͞ ͞ ͞ ͞
5. T(N) = 4T(N/2) + (n^2)(logn)

   Using the Master Theorem: 
   a = 4, b = 2, F(n) = (n^2)(logn) 

   Compare n^log2(4) vs. (n^2)(logn):
   n^2 vs. (n^2)(logn), F(n) is greater 

   Therefore, the time complexity is Theta((n^2)(logn)) 
    ______________________________________
   | Time Complexity: Theta((n^2)(logn))  |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ 
6. T(N) = 5T(N/2) + (n^2)/logn

   Using the Master Theorem: 
   a = 5, b = 2, F(n) = (n^2)/logn

   Compare n^log2(5) vs. (n^2)/logn:
   Replace log2(5) and 2 with constant "c", since they are both constants 
   n^c vs. (n^c)/logn, n^c is greater

   Therefore, the time complexity is Theta(n^log2(5))
    ____________________________________
   | Time Complexity: Theta(n^log2(5))  |
    ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ ͞ 
