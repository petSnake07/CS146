from typing import List

class Cities:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        dist = [[0 for _ in range(n)] for _ in range(n)]

        for i in range(n):
            for j in range(n):
                if i == j:
                    dist[i][j] = 0
                else:
                    dist[i][j] = None

        for edge in edges:
            dist[edge[0]][edge[1]] = edge[2]
            dist[edge[1]][edge[0]] = edge[2]

        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if dist[i][k] is not None and dist[k][j] is not None:
                        if dist[i][j] is None or dist[i][j] > dist[i][k] + dist[k][j]:
                            dist[i][j] = dist[i][k] + dist[k][j]
                            
        min_reachable = float('inf')
        city_num = -1

        for i in range(n):
            reachable_count = sum(1 for j in range(n) if 0 < dist[i][j] <= distanceThreshold)
            
            if reachable_count < min_reachable or (reachable_count == min_reachable and i > city_num):
                min_reachable = reachable_count
                city_num = i

        return city_num

cities = Cities()

n1 = 4
edges1 = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold1 = 4
print(cities.findTheCity(n1, edges1, distanceThreshold1))

n2 = 5
edges2 = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distanceThreshold2 = 2
print(cities.findTheCity(n2, edges2, distanceThreshold2)) 
