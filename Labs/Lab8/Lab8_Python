from typing import List

class CoinChange:
    def coinChange(self, coins: List[int], amount: int) -> int:
        combinations: List[List[int]] = []
        
        min_coins = self.coinChangeHelper(coins, amount, 0, float('inf'), [], combinations)
        
        if min_coins == float('inf'):
            return -1
        
        return min_coins
    
    def coinChangeHelper(self, coins: List[int], amount: int, index: int, min_coins: float, current_combo: List[int], combinations: List[List[int]]) -> int:
        if amount == 0:
            combinations.append(current_combo[:])
            
            if len(current_combo) < min_coins:
                min_coins = len(current_combo)
            
            return min_coins
        
        if index == len(coins) or amount < 0 or len(current_combo) >= min_coins:
            return min_coins
        
        min_coins = self.coinChangeHelper(coins, amount, index + 1, min_coins, current_combo, combinations)
        
        current_combo.append(coins[index])
        min_coins = self.coinChangeHelper(coins, amount - coins[index], index, min_coins, current_combo, combinations)
        current_combo.pop()
        
        return min_coins

if __name__ == "__main__":
    test = CoinChange()
    
    coins = [1, 2, 5]
    amount = 11
    print(test.coinChange(coins, amount))
    
    coins2 = [2]
    amount2 = 3
    print(test.coinChange(coins2, amount2))
    
    coins3 = [1]
    amount3 = 0
    print(test.coinChange(coins3, amount3))

